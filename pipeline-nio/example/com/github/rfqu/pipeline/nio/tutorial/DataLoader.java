package com.github.rfqu.pipeline.nio.tutorial;

import java.nio.ByteBuffer;

import com.github.rfqu.df4j.core.Actor;
import com.github.rfqu.df4j.core.CompletableFuture;
import com.github.rfqu.df4j.core.ListenableFuture;
import com.github.rfqu.pipeline.nio.AsyncSocketChannel;

/**
 * reads data from a TCP connection generated by {@link DataFeeder} 
 * and stores them in an array
 */
class DataLoader extends Actor<MyRequest> {
    AsyncSocketChannel asc;
    int size;
    int[] data;
    int counter = 0;
    CompletableFuture<int[]> result;

    public DataLoader(AsyncSocketChannel asc) {
        this.asc = asc;
    }

    ListenableFuture<int[]> read() {
        result = new CompletableFuture<int[]>();
        MyRequest r = new MyRequest();
        r.addListener(this);
        asc.read(r);
        return result;
    }

    /** handles finished reads
     */
    @Override
    protected void act(MyRequest r) throws Exception {
        ByteBuffer buf = r.getBuffer();
        if (data==null) {
            // first packet, read size
           size = buf.getInt();
           data = new int[size];
        }
        int remaining = buf.remaining()/4;
        int limit=size-counter;
        if (limit==0) {
            result.post(data);
            return;
        }
        if (limit>remaining) {
            limit=remaining;
        }
        for (int k=counter; k<counter+limit; k++) {
            int datum=buf.getInt();
            data[counter]=datum;
        }
        counter+=limit;
        if (size==counter) return; // nothing to do
        asc.read(r);
        r.addListener(this); // DataLoader.post() will be invoked
    }
}