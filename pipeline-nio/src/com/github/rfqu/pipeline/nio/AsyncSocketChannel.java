/*
 * Copyright 2011-2012 by Alexei Kaigorodov
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */
package com.github.rfqu.pipeline.nio;

import java.io.IOException;
import java.net.SocketAddress;
import java.net.StandardSocketOptions;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousChannelGroup;
import java.nio.channels.AsynchronousCloseException;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.util.concurrent.TimeUnit;

import com.github.rfqu.df4j.core.CompletableFuture;
import com.github.rfqu.df4j.core.ListenableFuture;
import com.github.rfqu.df4j.core.Port;
import com.github.rfqu.df4j.core.StreamPort;
import com.github.rfqu.df4j.ext.ImmediateExecutor;
import com.github.rfqu.pipeline.core.SinkNode;
import com.github.rfqu.pipeline.core.SourceNode;

/**
 * Wrapper over {@link AsynchronousSocketChannel}.
 * Simplifies input-output, handling queues of I/O requests.
 * 
 * For client-side connections, instatntiate and call connect(addr).
 * For server-side connections, new instances are generated by
 * {@link AsyncServerSocketChannel}.
 *  
 * Internally, manages 2 input queues: one for reading requests and one for writing requests.
 * After request is served, it is sent to the port denoted by <code>replyTo</code>
 * property in the request.
 * 
 * IO requests can be posted immediately, but will be executed
 * only after connection completes.
 * If interested in the moment when connection is established,
 * add a listener to connEvent.
 */
public class AsyncSocketChannel {
	/** read requests queue */
	public final Reader reader = new Reader();
	/** write requests queue */
	public final Writer writer = new Writer();

    protected volatile AsynchronousSocketChannel channel;
    protected final ConnectionCompleter connEvent=new ConnectionCompleter();
    protected final CompletableFuture<AsyncSocketChannel> closeEvent=new CompletableFuture<AsyncSocketChannel>();
    
    /**
     * for client-side socket
     * Starts connection to a server. IO requests can be queued immediately,
     * but will be executed only after connection completes.
     * If interested in the moment when connection is established, add a
     * listener to the result of call to {@link getConnEvent}().
     * 
     * @throws IOException
     */
    public AsyncSocketChannel(SocketAddress addr) throws IOException {
        AsynchronousChannelGroup acg=AsyncChannelCroup.getCurrentACGroup();
        AsynchronousSocketChannel channel=AsynchronousSocketChannel.open(acg);
        channel.connect(addr, channel, connEvent);
    }
    
    /** for server-side connections
     * 
     * @param channel accepted connection
     */
    public AsyncSocketChannel(AsynchronousSocketChannel channel) {
        connEvent.completed(null, channel);
    }
    
    public void setTcpNoDelay(boolean on) throws IOException {
        channel.setOption(StandardSocketOptions.TCP_NODELAY, on);
    }

    /** signals connection completion
     *  @return same object as {@link connect }
     */
    public ListenableFuture<AsyncSocketChannel> getConnEvent() {
        return connEvent;
    }

    /** signals connection closing */
    public ListenableFuture<AsyncSocketChannel> getCloseEvent() {
        return closeEvent;
    }    
    
    public boolean isConnected() {
        return getConnEvent().isDone();
    }

    public boolean isClosed() {
        return getCloseEvent().isDone();
    }
    
    // ================== StreamPort I/O interface 

    /** disallows subsequent posts of requests; already posted requests 
     * would be processed.
     * @throws IOException 
     */
    public void close() {
        try {
            closeEvent.post(this);
        } catch (IllegalStateException ok) {
        }
        try {
            channel.close();
        } catch (IOException e) {
        }
    }

    //===================== inner classes
    
    /**
     * callback for connection completion
     * works both in client-side and server-side modes
     */
    class ConnectionCompleter extends CompletableFuture<AsyncSocketChannel>
         implements CompletionHandler<Void, AsynchronousSocketChannel>
    {
        // ------------- CompletionHandler's backend

        @Override
        public void completed(Void result, AsynchronousSocketChannel asc) {
            channel=asc;
            reader.resume();
            writer.resume();
            super.post(AsyncSocketChannel.this);
        }

        /**
         * in server-side mode, channel==null
         */
        @Override
        public void failed(Throwable exc, AsynchronousSocketChannel channel) {
            super.postFailure(exc);
        } 
    }
    
    class Reader extends SourceNode<ByteBuffer>
       implements CompletionHandler<Integer, ByteBuffer>
    {
        /** here output messages return */
        protected StreamInput<ByteBuffer> myOutput=new StreamInput<ByteBuffer>();

        protected Semafor channelAcc = new Semafor(); // channel accessible

       long timeout=0;
        
        public Reader() {
            super(new ImmediateExecutor());
        }

        public void resume() {
            channelAcc.up();
        }

        @Override
        public Port<ByteBuffer> getReturnPort() {
            return myOutput;
        }

        // ------------- CompletionHandler's backend

        public void failed(Throwable exc, ByteBuffer attach) {
            if (exc instanceof AsynchronousCloseException) {
                AsyncSocketChannel.this.close();
            } else {
                channelAcc.up(); // let subsequent requests fail
                postFailure(exc);
            }
        }

        //-------------------- Actor's backend

        @Override
        protected void act() {
            ByteBuffer buffer=myOutput.get();
            if (isClosed()) {
                postFailure(new AsynchronousCloseException());
                return;
            }
            if (timeout>0) {
                channel.read(buffer,
                        timeout, TimeUnit.MILLISECONDS, null, this);
            } else {
                channel.read(buffer, null, this);
            }
        }
        
        public void completed(Integer result, ByteBuffer buffer) {
            channelAcc.up();
            sinkPort.post(buffer);
        }
    }
    
    class Writer extends SinkNode<ByteBuffer>
       implements CompletionHandler<Integer, ByteBuffer>
    {
        /**  here input messages arrive */
        protected StreamInput<ByteBuffer> myInput=new StreamInput<ByteBuffer>(){
            public void post(ByteBuffer buffer) {
                if (isClosed()) {
                    postFailure(new AsynchronousCloseException());
                    return;
                }
                if (!buffer.hasRemaining()) {
                    postFailure(new IllegalArgumentException());
                    return;
                }
                super.post(buffer);
            }
        };
        protected Semafor channelAcc = new Semafor(); // channel accessible
        long timeout=0;

        public Writer() {
            super(new ImmediateExecutor());
        }

        @Override
        public StreamPort<ByteBuffer> getInputPort() {
            return myInput;
        }       

        public void resume() {
            channelAcc.up();
        }

        //-------------------- Actor's backend

        @Override
        protected void act() {
            ByteBuffer buffer=myInput.get();
            write(buffer);
        }
        
        protected void write(ByteBuffer buffer) {
            if (isClosed()) {
                postFailure(new AsynchronousCloseException());
                return;
            }
            if (timeout>0) {
                channel.write(buffer,
                        timeout, TimeUnit.MILLISECONDS, null, this);
            } else {
                channel.write(buffer, null, this);
            }
        }
        
        // ------------- CompletionHandler's backend

        public void failed(Throwable exc, ByteBuffer attach) {
            if (exc instanceof AsynchronousCloseException) {
                AsyncSocketChannel.this.close();
            } else {
                channelAcc.up(); // let subsequent requests fail
                postFailure(exc);
            }
        }

        public void completed(Integer result, ByteBuffer buffer) {
            if (buffer.hasRemaining()) {
                write(buffer);
            } else {
                channelAcc.up();
                free(buffer);
            }
        }
    }
}
